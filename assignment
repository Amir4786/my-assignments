
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1\n",
    "'''\n",
    "# = 5\n",
    "O = 3\n",
    "X = 1\n",
    "! = -1\n",
    "!! = -3\n",
    "!!! = -5\n",
    "'''\n",
    "def fun1(*a):\n",
    "    sumy=[]\n",
    "    for i in range(len(*a)):\n",
    "        x=input(\"Add one by one all the given symbols. Select from #,O,X,!,!!,!!!: \")\n",
    "        if x=='#':\n",
    "            sumy.append(5)\n",
    "        if x=='O':\n",
    "            sumy.append(3)\n",
    "        if x=='X':\n",
    "            sumy.append(1)\n",
    "        if x=='!':\n",
    "            sumy.append(-1)\n",
    "        if x=='!!':\n",
    "            sumy.append(-3)\n",
    "        if x=='!!!':\n",
    "            sumy.append(-5)\n",
    "    if sum(sumy)>0:\n",
    "        print(sum(sumy))\n",
    "    elif sum(sumy)<=0:\n",
    "        print(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Add one by one all the given symbols. Select from #,O,X,!,!!,!!!: #\n",
      "Add one by one all the given symbols. Select from #,O,X,!,!!,!!!: !!\n",
      "Add one by one all the given symbols. Select from #,O,X,!,!!,!!!: O\n",
      "Add one by one all the given symbols. Select from #,O,X,!,!!,!!!: o\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "fun1([4,9,7,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the above Q1 is unable to satisfy the question demand but I have another answer.\n",
    "#Q1\n",
    "def fun2(*a):\n",
    "    d1=[]\n",
    "    for i in a:\n",
    "        type(i)==list\n",
    "        for j in i:\n",
    "            if j=='#':\n",
    "                d1.append(5)\n",
    "            if j=='O':\n",
    "                d1.append(3)\n",
    "            if j=='X':\n",
    "                d1.append(1)\n",
    "            if j=='!':\n",
    "                d1.append(-1)\n",
    "            if j=='!!':\n",
    "                d1.append(-3)\n",
    "            if j=='!!!':\n",
    "                d1.append(-5)\n",
    "    if sum(d1)>=0:\n",
    "        print(sum(d1))\n",
    "    elif sum(d1)<0:\n",
    "        print(0)\n",
    "    else:\n",
    "        print(\"Not according to the query and the sum is: \",sum(d1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "fun2(['#','O'],['O','!!!'],['!','!!'],['!!!','X','X','X','X'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2\n",
    "def combin(*a):\n",
    "    d=1\n",
    "    c=[]\n",
    "    for i in a:\n",
    "        d*=i\n",
    "        c.append(d)\n",
    "    print('Your Combination will be: ',c[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your Combination will be:  2520\n"
     ]
    }
   ],
   "source": [
    "combin(5,8,7,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3\n",
    "''' Owing to copy paste problem I took the code from net.'''\n",
    "MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',\n",
    "                    'C':'-.-.', 'D':'-..', 'E':'.',\n",
    "                    'F':'..-.', 'G':'--.', 'H':'....',\n",
    "                    'I':'..', 'J':'.---', 'K':'-.-',\n",
    "                    'L':'.-..', 'M':'--', 'N':'-.',\n",
    "                    'O':'---', 'P':'.--.', 'Q':'--.-',\n",
    "                    'R':'.-.', 'S':'...', 'T':'-',\n",
    "                    'U':'..-', 'V':'...-', 'W':'.--',\n",
    "                    'X':'-..-', 'Y':'-.--', 'Z':'--..',\n",
    "                    '1':'.----', '2':'..---', '3':'...--',\n",
    "                    '4':'....-', '5':'.....', '6':'-....',\n",
    "                    '7':'--...', '8':'---..', '9':'----.',\n",
    "                    '0':'-----', ', ':'--..--', '.':'.-.-.-',\n",
    "                    '?':'..--..', '/':'-..-.', '-':'-....-',\n",
    "                    '(':'-.--.', ')':'-.--.-'}\n",
    "def morse_code(s):\n",
    "    if type(s)==str:\n",
    "        for i in s:\n",
    "            if i in MORSE_CODE_DICT.keys():\n",
    "                print(MORSE_CODE_DICT[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-.--.\n",
      "...\n",
      "-\n",
      "..-\n",
      "-..\n",
      ".\n",
      "-.\n",
      "-\n",
      "..\n",
      "-.\n",
      ".\n",
      "..-\n",
      ".-.\n",
      "---\n",
      "-.\n",
      "-.--.-\n"
     ]
    }
   ],
   "source": [
    "morse_code('(STUDENT INEURON)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4\n",
    "def prime_no(x):\n",
    "    a=[]\n",
    "    for i in range(2,x):\n",
    "        if x%i==0:\n",
    "            a.append(i)\n",
    "    if len(a)>0 or x<2:\n",
    "        print(False)\n",
    "    else:\n",
    "        print(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n",
      "False\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "prime_no(9)\n",
    "prime_no(13)\n",
    "prime_no(2)\n",
    "prime_no(1)\n",
    "prime_no(-5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5\n",
    "def word(x):\n",
    "    sum1=[]\n",
    "    sum2=[]\n",
    "    alphabets=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n",
    "    for i in x:\n",
    "        if i in alphabets:\n",
    "            if alphabets.index(i)%2==0:\n",
    "                sum1.append(False)\n",
    "                sum2.append(0)\n",
    "            else:\n",
    "                sum1.append(True)\n",
    "                sum2.append(1)\n",
    "    print(sum1)\n",
    "    print(sum2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False, True, False, True, False, True, False, False, True, False, True]\n",
      "[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1]\n"
     ]
    }
   ],
   "source": [
    "word('abcd ineuron')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
